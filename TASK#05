QS: Analyze traffic accident data to identify patterns related to road conditions, weather, and time of day. Visualize accident hotspots and contributing factors.

import pandas as pd
df = pd.read_csv(r"C:\Users\ARSALAN\INTERNHSIP\US_Accidents_March23.csv")

df
df.head(5)
df.columns
df.dtypes.value_counts()
# Check for null values
null = df.isnull().sum()

# Display the count of null values for each column
print("Null Values in Each Column:")
print(null)
df.State.unique

df1=df[df['State']=='CA']
df1['IDD'] = df1['ID'].astype('str').str.extractall('(\d+)').unstack().fillna('').sum(axis=1).astype(int)
df1.head(5)
df1.shape
df1.columns
df1.duplicated().sum()
d1f=df1.dropna(subset=['Precipitation(in)'])  
df1=df1.dropna(subset=['Temperature(F)','Wind_Chill(F)','Humidity(%)','Pressure(in)','Visibility(mi)','Wind_Direction', 'Wind_Speed(mph)',
                      'Weather_Condition'])
df1.isna().sum()/len(df1)*100

df1=df1.dropna(subset=['City','Sunrise_Sunset',
       'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight'])
df1.isna().sum()/len(df1)*100

df1['Weather_Condition'].value_counts()

df_cat=df1.select_dtypes('object')
df_num=df1.select_dtypes(np.number)
df_cat=df_cat.drop('ID',axis=1)
df_cat=df1.select_dtypes('object')
col_name=[]
length=[]

for i in df_cat.columns:
    col_name.append(i)
    length.append(len(df_cat[i].unique()))
df_2=pd.DataFrame(zip(col_name,length),columns=['feature','count_of_unique_values'])
df_2

df1.drop(['Description','Zipcode','Weather_Timestamp'],axis=1,inplace=True)
del df1['Airport_Code']
df_num.columns
len(df_num.columns)
df_cat.columns
len(df['City'].unique())
df_num=df1.select_dtypes(np.number)
col_name=[]
length=[]

for i in df_num.columns:
    col_name.append(i)
    length.append(len(df_num[i].unique()))
df_2=pd.DataFrame(zip(col_name,length),columns=['feature','count_of_unique_values'])
df_2
plt.figure(figsize=(15 ,9))
sns.heatmap(df_num.corr() , annot=True)
cities = df1['City'].unique()
len(cities)
accidents_by_cities = df1['City'].value_counts()
accidents_by_cities
accidents_by_cities[:10]

fig, ax = plt.subplots(figsize=(8,5))
accidents_by_cities[:10].plot(kind='bar')
ax.set(title = 'Top 10 cities By Number of Accidents',
       xlabel = 'Cities',
       ylabel = 'Accidents Count')
plt.show()

accidents_severity = df1.groupby('Severity').count()['ID']
accidents_severity

fig, ax = plt.subplots(figsize=(8, 6), subplot_kw=dict(aspect="equal"))
label = [1,2,3,4]
plt.pie(accidents_severity, labels=label,
        autopct='%1.1f%%', pctdistance=0.85)
circle = plt.Circle( (0,0), 0.5, color='white')
p=plt.gcf()
p.gca().add_artist(circle)
ax.set_title("Accident by Severity",fontdict={'fontsize': 16})
plt.tight_layout()
plt.show()

df1['Start_Time'].dtypes
df1['End_Time'].dtypes
import pandas as pd

# Specify the format of the date and time in your 'Start_Time' column
date_format = "%Y-%m-%d %H:%M:%S"

# Convert the 'Start_Time' column to datetime with the specified format, using 'errors' parameter
df1['Start_Time'] = pd.to_datetime(df1['Start_Time'], format=date_format, errors='coerce')

fig, ax = plt.subplots(figsize=(8, 5))
sns.histplot(df1['Start_Time'].dt.hour, bins=24, ax=ax)
plt.xlabel("Start_Time Hour")
plt.ylabel("Number of Occurrence")
plt.show()
df_num.plot(kind='scatter', y='Start_Lat', x='Severity')
import pandas as pd
import matplotlib.pyplot as plt


weather_conditions = df['Weather_Condition'].value_counts()

fig, ax = plt.subplots(figsize=(8, 5))
weather_conditions[:20].plot(kind='bar')
ax.set(title='Top 20 Weather Conditions at Time of Accident Occurrence',
       xlabel='Weather',
       ylabel='Accidents Count')
plt.show()

sns.jointplot(x=df_num.Start_Lat.values , y=df_num.Start_Lng.values,height=10)
plt.ylabel('Start lattitude', fontsize=12)
plt.xlabel('Start lattitude', fontsize=12)
plt.show()
sns.jointplot(x=df_num.Start_Lat.values , y=df_num.Start_Lng.values,height=10)
plt.ylabel('Start lattitude', fontsize=12)
plt.xlabel('Start lattitude', fontsize=12)
plt.show()
